1. СТВОРЕННЯ ДІАГРАМИ ПРЕЦЕДЕНТІВ

Для створення діаграми прецедентів був виділений актор робітник магазину торгівельного центру. Даний актор може виконувати наступні дії:
-	Авторизація.
-	Вихід з системи.
-	Перегляд особистого профілю.
-	Перегляд замовлень користувачів. Зміна статусу замовлення.
-	Перегляд усіх та майбутніх робочих змін.

2. СТВОРЕННЯ ДІАГРАМИ КОМПОНЕНТІВ

Для побудови діаграми компонентів були виділені такі структурні компоненти:
-	MainActivity – головна сторінка застосунку, авторизація.
-	HomeActivity – сторінка, на яку потрапляє користувач після успішної авторизації, містить навігаційну панель для переходів на наступні сторінки.
-	HomeFragment – відображає профіль робітника.
-	OrderFragment – відображає замовлення в системі.
-	ShiftsFragment – відображає робочі зміни робітника.

3. СТВОРЕННЯ ДІАГРАМИ ПАКЕТІВ

Відповідно до структури нашого застосунку, на діаграмі пакетів відображено такі директорії:
-	Models – моделі, які описують сутності, з якими працює програмний код.
-	Controllers – контролери обробляють запити до серверу.
-	Api – налаштування доступу до api серверу.
-	Ui – усі графічні елементи, інтерфейс користувача для відображення даних.

4. СТВОРЕННЯ ДІАГРАМИ СТАНІВ

Для розробки діаграми станів були виділені такі процеси:
-	Авторизація.
-	Особистий профіль робітника.
-	Робота з замовленнями користувачів.
-	Робочі зміни.

5. ОПИС РОЗРОБКИ МОБІЛЬНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМА

Мобільний застосунок було створено для платформи Android. Програмний код був написаний на мові програмування Kotlin. Для відображення графічного інтерфейсу користувача були використані файли xml.
Мобільний застосунок надає графічний інтерфейс для відображення:
-	Інтерфейсу для авторизації користувача.
-	Замовлень користувачів.
-	Особистого профілю робітника.
-	Робочого графіку робітника.

6. ОПИС АРХІТЕКТУРИ ПРОГРАМНОЇ ЧАСТИНИ

За архітектуру в застосунку було  взято шаблон MVC. Даний шаблон полягає в тому, щоб розділити структуру проєкту на частини:
-	Model – модель: сутності бази даних, з якими працює система.
-	Controller – контролер: обробляє запити до серверу.
-	View – представлення: відповідає за те, як дані будуть відображені користувачу, тобто графічний інтерфейс користувача.
Також в структурі присутня допоміжна директорія api. Тека api відповідає за взаємодію мобільного застосунку та серверної частини.

7. ЛОКАЛІЗАЦІЯ МОБІЛЬНОГО ЗАСТОСУНКУ

Інтерфейс користувача може бути перекладений українською та англійською мовами. Локалізація в даній програмній частині була реалізована за допомогою спеціального вбудованого редактору для перекладу та файлів ресурсів для рядків.
