1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Система складається з серверної частини, хмарного сервера бази даних, серверної частини клієнта, персонального комп’ютера користувача, розумного пристрою та мобільного пристрою.
Серверна частина системи реалізує весь проект та бізнес логіку, а також забезпечує взаємодію з базою даних. Всі дані користувачів зберігаються на хмарному сервері бази даних Azure.
Веб-сторінки зберігаються на сервері клієнтської частини, який забезпечує їх доступність для користувачів. Персональний комп’ютер користувача дозволяє йому взаємодіяти з системою через веб-інтерфейс.
Додаткову функціональність системи забезпечує розумний пристрій, який зчитує дані про відвідування користувачами магазинів. Мобільний пристрій надає користувачам можливість взаємодіяти з системою у будь-який час та з будь-якого місця.
Взаємодія між клієнтською та серверною частиною відбувається за допомогою Rest специфікації, забезпечуючи надійну та ефективну передачу даних. Інші компоненти системи взаємодіють через протокол HTTPS, що гарантує безпечний обмін даними.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Для розробки діаграми розгортання були виділені такі пристрої:
-	Сервер, на якому реалізовано проект та уся бізнес логіка. Тут також реалізована взаємодія з базою даних.
-	Хмарний сервер бази даних Azure для зберігання даних користувачів.
-	Сервер клієнтської частини, яка зберігає веб-сторінки.
-	Персональний комп’ютер користувача, за допомогою якого він може взаємодіяти з системою
-	Розумний пристрій, який надає додаткову функціональність для системи, а саме зчитування даних про відвідування користувачами магазинів.
-	Мобільний пристрій, який надає додатові можливісті взаємодіяти з системою.
Взаємодія клієнтської та серверної частини відбувається за допомоги Rest специфікації. Інші компоненти системи взаємодіють через протокол HTTPS.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

За архітектуру для проєкту було взято MVC архітектуру. Її суть полягає в тому, що ми розділяємо проєкт на окремі компоненти. В нашому випадку ми виділили такі компоненти:
-	Models – моделі, класи, які описують наші сутності в базі даних.
-	Controllers – контролери, оброблюють дані користувачів. Тут пишеться вся бізнес логіка застосунку.
-	Routes – маршрути, описують, які дії мають бути виконані при запиті на сервер.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Для розробки діаграми прецедентів у системі були виділені такі актори:
-	Користувач: відвідувач торгівельного центру, який здійснює покупки в магазинах.
-	Адміністратор торгівельного центру: користувач, який управляє працівниками торгівельного центру та асортиментом магазинів.
-	Робітник магазину: управляє замовленнями користувачів.

5 ПОБУДОВА ER-ДІАГРАМИ

Для розробки ER моделі даних були виділені такі сутності в системі:
-	Користувач: містить інформацію про всіх користувачів системи.
-	Робітник: робітник магазину торгівельного центру.
-	Адміністратор: адміністратор торгівельного центру.
-	Замовлення: замовлення, які здійснюють користувачі.
-	Деталі замовлення: товари, які містяться в замовленні.
-	Знижка: знижка, яка застосовується користувачем до замовлення, для пониження вартості товарів.
-	Мережа торгівельних центрів: окремі торгівельні центри організовують мережу.
-	Торгівельний центр: сукупність магазинів.
-	Магазин: містить товари, які користувачі можуть придбати.
-	Товар: товар магазину, який може придбати користувач.
-	Відвідування: містить інформацію про вхід користувача в магазин та його вихід з магазину.
-	Зміна: зміна робітника в магазині.

6 СПЕЦИФІКАЦІЯ REST

Для взаємодії серверу з іншими програмними шарами використовується Rest API. Опис специфікації Rest API наведено в додатку А.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

У даній системі виділяються наступні компоненти:

-	Server Component (Серверний компонент): реалізує весь проект та бізнес логіку. Відповідає за обробку запитів клієнтів, управління даними та взаємодію з базою даних.
-	Database Component (Компонент бази даних): хмарний сервер бази даних Azure, де зберігаються всі дані користувачів, включаючи інформацію про замовлення, товари, користувачів тощо.
-	Client-Side Server Component (Компонент серверної частини клієнта): Зберігає веб-сторінки та забезпечує їх доступність для користувачів. Відповідає за відправку веб-сторінок у відповідь на запити користувачів.
-	User PC Component (Компонент персонального комп’ютера користувача): забезпечує взаємодію користувача з системою через веб-інтерфейс. Відправляє запити до серверної частини та отримує відповіді у вигляді веб-сторінок.
-	Smart Device Component (Компонент розумного пристрою): зчитує дані про відвідування користувачами магазинів та передає цю інформацію до серверної частини для подальшої обробки.
-	Mobile Device Component (Компонент мобільного пристрою): надає користувачам можливість взаємодіяти з системою у будь-який час та з будь-якого місця через мобільний додаток.

ВИСНОВКИ

Висновки: в результаті виконання лабораторної роботи була реалізована серверна частина програмної системи, з дотриманням вимог щодо захисту даних, реалізована відповідна бізнес логіка проєкту, описана специфікація Rest API. Також були створені UML діаграми розгортання, прецедентів, станів, а також ER-модель даних, які описують усі складові серверної частини проєкту. 

ДОДАТОК А
Специфікація REST
Контролер: «Користувач»
Метод: GET
URL: /user
Опис: Отримати усіх користувачів
Контролер: «Користувач»
Метод: GET
URL: /profile
Опис: Отримати профіль користувача
Контролер: «Користувач»
Метод: POST
URL: /login
Опис: Авторизація
Контролер: «Користувач»
Метод: POST
URL: /registration
Опис: Реєстрація
Контролер: «Користувач»
Метод: PUT
URL: /savePassword
Опис: Редагувати пароль
Контролер: «Користувач»
Метод: PUT
URL: /saveProfile
Опис: Редагувати профіль
Контролер: «Мережа торгівельних центрів»
Метод: GET
URL: /mallChain
Опис: Отримати усі мережі торгівельних центрів
Контролер: «Мережа торгівельних центрів»
Метод: GET
URL: /mallChain/:id
Опис: Отримати мережу торгівельних центрів за ідентифікатором
Контролер: «Мережа торгівельних центрів»
Метод: POST
URL: /mallChain
Опис: Створити мережу торгівельних центрів
Контролер: «Мережа торгівельних центрів»
Метод: PUT
URL: /mallChain/:id
Опис: Редагувати мережу торгівельних центрів
Контролер: «Мережа торгівельних центрів»
Метод: DELETE
URL: /mallChain/:id
Опис: Видалити мережу торгівельних центрів
Контролер: «Торгівельний центр»
Метод: GET
URL: /mall
Опис: Отримати усі торгівельні центри
Контролер: «Торгівельний центр»
Метод: GET
URL: /mall/:id
Опис: Отримати торгівельний центр за ідентифікатором
Контролер: «Торгівельний центр»
Метод: POST
URL: /mall
Опис: Створити торгівельний центр
Контролер: «Торгівельний центр»
Метод: PUT
URL: /mall/:id
Опис: Редагувати торгівельний центр
Контролер: «Торгівельний центр»
Метод: DELETE
URL: /mall/:id
Опис: Видалити торгівельний центр
Контролер: «Магазин»
Метод: GET
URL: /store
Опис: Отримати усі магазини
Контролер: «Магазин»
Метод: GET
URL: /store/:id
Опис: Отримати магазин за ідентифікатором
Контролер: «Магазин»
Метод: GET
URL: /store/mall/:mallId
Опис: Отримати магазини за ідентифікатором торгівельного центру
Контролер: «Магазин»
Метод: POST
URL: /store
Опис: Створити магазин
Контролер: «Магазин»
Метод: PUT
URL: /store/:id
Опис: Редагувати магазин
Контролер: «Магазин»
Метод: DELETE
URL: /store/:id
Опис: Видалити магазин
Контролер: «Замовлення»
Метод: GET
URL: /order
Опис: Отримати усі замовлення
Контролер: «Замовлення»
Метод: GET
URL: /order/:id
Опис: Отримати замовлення за ідентифікатором
Контролер: «Замовлення»
Метод: GET
URL: /order/user/:id
Опис: Отримати усі замовлення користувача за його ідентифікатором
Контролер: «Замовлення»
Метод: POST
URL: /order
Опис: Створити замовлення
Контролер: «Замовлення»
Метод: PUT
URL: /order/:id
Опис: Редагувати замовлення
Контролер: «Деталі замовлення»
Метод: GET
URL: /orderDetails/order/:id
Опис: Отримати усі деталі замовлення за його ідентифікатором
Контролер: «Деталі замовлення»
Метод: GET
URL: /orderDetails/getSum/:id
Опис: Отримати суму замовлення за його ідентифікатором
Контролер: «Деталі замовлення»
Метод: POST
URL: /orderDetails
Опис: Створити деталі замовлення
Контролер: «Деталі замовлення»
Метод: POST
URL: /applyDiscount/:discount_id/:id
Опис: Застосувати знижку до деталей замовлення
Контролер: «Знижка»
Метод: GET
URL: /discount/:userId
Опис: Отримати усі доступні знижки для користувача за його ідентифікатором
Контролер: «Знижка»
Метод: POST
URL: /discount/:userId
Опис: Створити знижку для користувача за його ідентифікатором
Контролер: «Відвідування»
Метод: GET
URL: /attendanceAnalyze/store/:storeId
Опис: Отримати аналіз відвідування магазину за його ідентифікатором
Контролер: «Відвідування»
Метод: GET
URL: /attendance/store/:storeId/date/:date
Опис: Отримати відвідування магазину в обрану дату
Контролер: «Відвідування»
Метод: GET
URL: /attendance/store/:storeId/range/:dateFrom/:dateTo
Опис: Отримати відвідування магазину в обраний діапазон дат
Контролер: «Відвідування»
Метод: GET
URL: /attendanceCount/store/:storeId/date/:date
Опис: Підрахунок відвідувань в магазині в обрану дату
Контролер: «Відвідування»
Метод: GET
URL: /attendanceCount/store/:storeId/range/:dateFrom/:dateTo
Опис: Підрахунок відвідувань в магазині в обраний діапазон дат
Контролер: «Відвідування»
Метод: POST
URL: /attendance
Опис: Створити новий запис про відвідування
Контролер: «Робітник»
Метод: GET
URL: /worker
Опис: Отримати усіх робітників
Контролер: «Робітник»
Метод: GET
URL: /worker/store/:storeId
Опис: Отримати усіх робітників магазину
Контролер: «Робітник»
Метод: GET
URL: /worker/mall/:mallId
Опис: Отримати усіх робітників торгівельного центру
Контролер: «Робітник»
Метод: POST
URL: /worker
Опис: Створити робітника
Контролер: «Робоча зміна»
Метод: GET
URL: /workersBy/store/:storeId/date/:date
Опис: Отримати робітників, які мають зміни в обраному магазині в обрану дату
Контролер: «Робоча зміна»
Метод: GET
URL: /countWorkersBy/store/:storeId/date/:date
Опис: Підрахувати кількість робітників
Контролер: «Робоча зміна»
Метод: POST
URL: /shift
Опис: Створити зміну
Контролер: «Робоча зміна»
Метод: POST
URL: /generateShifts/:workerId
Опис: Згенерувати кілька змін для робітника